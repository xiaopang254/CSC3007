---
title: "Traffic-Accidents-Singapore"
format: html
---

# Required packages

```{r}
#| label: required-packages
#| message: false

# Function to install and load a package
install_and_load <- function(package) {
  if (!requireNamespace(package, quietly = TRUE)) {
    install.packages(package)
  }
  library(package, character.only = TRUE)
}

# List of required packages
required_packages <- c("tidyverse", "gridExtra", "grid", "gt", "gtExtras", "sparkline", "patchwork", "png")

# Install and load required packages
for (pkg in required_packages) {
  install_and_load(pkg)
}
```

# Data Import

```{r}
#| label: data-import
#| message: false

# Import the dataset
cleaned_dataset <- read.csv("../data/cleaned_dataset.csv")
colnames(cleaned_dataset)
```
# Extract Data

```{r}
#| label: extract-data
#| message: false

# Function to extract data
extract_data <- function(dataset, category) {
  dataset %>% filter(Category == category)
}

# Use the function to extract data
vehicle_accidents <- extract_data(cleaned_dataset, "Injury Accidents Attributed To Vehicles")
non_vehicle_accidents <- extract_data(cleaned_dataset, "Injury Accidents Attributed To Non-Vehicles (Pedestrians, Cyclists, PMD)")

print(vehicle_accidents)
print(non_vehicle_accidents)
```

# Transform Data

```{r}
#| label: transform-data
#| message: false

# Function to transform data
transform_data <- function(data, years, is_vehicle = TRUE) {
  if (is_vehicle) {
    tibble(
      Year = years,
      Accidents = as.numeric(data[1, 2:12])
    )
  } else {
    tibble(
      Year = years,
      Accidents = colSums(data[, 2:12], na.rm = TRUE)
    )
  }
}

# Extract the years from the column names
years <- as.numeric(sub("X", "", names(cleaned_dataset)[2:12]))

# Use the function to transform data
vehicle_data <- transform_data(vehicle_accidents, years, TRUE)
non_vehicle_data <- transform_data(non_vehicle_accidents, years, FALSE)

print(vehicle_data)
print(non_vehicle_data)
```

# Create Sparklines

```{r}
#| label: create-sparklines
#| message: false

# Function to create and save sparklines
create_sparkline <- function(data, filename) {
  htmlwidgets::saveWidget(sparkline(data$Accidents, type = "line"), filename, selfcontained = TRUE)
}

# Use the function to create sparklines
create_sparkline(vehicle_data, 'vehicle_sparkline.html')
create_sparkline(non_vehicle_data, 'non_vehicle_sparkline.html')
```

# Plot Overview Graph

```{r}
#| label: plot-overview-graph
#| message: false

# Function to create plot
create_plot <- function(data, title, line_color, point_color) {
  ggplot(data, aes(x = Year, y = Accidents)) +
    geom_line(color = line_color) +
    geom_point(color = point_color) +
    scale_x_continuous(breaks = unique(data$Year)) +
    scale_y_continuous(n.breaks = 8) +
    theme_minimal() +
    labs(
      title = title,
      x = "Year",
      y = "No. of Accidents",
      caption = "Source: Singapore Police Force"
    ) +
    theme(
      plot.caption = element_text(face = "italic", hjust = 1, vjust = 1),
      plot.title = element_text(face = "bold", hjust = 0.5, margin = margin(b = 10)),
      axis.title.x = element_text(margin = margin(t = 10)),
      axis.title.y = element_text(margin = margin(r = 10))
    )
}

# Use the function to create plots
vehicle_plot <- create_plot(vehicle_data, "Traffic Accidents Attributed To Vehicles", "#2F81C5", "#205988")
non_vehicle_plot <- create_plot(non_vehicle_data, "Traffic Accidents Attributed To Non-Vehicles (Pedestrians, Cyclists, PMD)", "#2DA5B2", "#217E88")

# Create a spacer grob
spacer <- nullGrob()

# Combine the two plots side by side with spacing
overview_plot <- grid.arrange(vehicle_plot, spacer, non_vehicle_plot, ncol = 3, widths = c(1, 0.1, 1))

# Save the combined plot as an image
ggsave("overview_plot.png", plot = overview_plot, width = 16, height = 5, dpi = 300)

# Display the saved plot image
grid::grid.newpage()
grid::grid.raster(as.raster(png::readPNG("overview_plot.png")))
```


# Identify Sub-Categories

```{r}
#| label: identify-sub-categories
#| message: false

# Identify the rows for the main categories
vehicles_keyword <- "Injury Accidents Attributed To Vehicles"
non_vehicles_keyword <- "Injury Accidents Attributed To Non-Vehicles (Pedestrians, Cyclists, PMD)"

# Find the starting indices of each category
start_vehicle <- which(cleaned_dataset$Category == vehicles_keyword)
start_non_vehicle <- which(cleaned_dataset$Category == non_vehicles_keyword)

# Determine the ending indices of each category
end_vehicle <- ifelse(length(start_non_vehicle) > 0, start_non_vehicle - 1, nrow(df))
end_non_vehicle <- nrow(cleaned_dataset)

# Extract causes for vehicles from the dataset
causes_vehicles <- cleaned_dataset[(start_vehicle + 1):end_vehicle, ] |>
  filter(!grepl(non_vehicles_keyword, Category)) |>
  select(Category)

# Extract causes for non-vehicles from the dataset
causes_non_vehicles <- cleaned_dataset[(start_non_vehicle + 1):end_non_vehicle, ] |>
  filter(!grepl(vehicles_keyword, Category)) |>
  select(Category)

print(causes_vehicles)
print(causes_non_vehicles)
```

# Read in Long Format

```{r}
#| label: read-in-long-format
#| message: false

# Select relevant columns and gather into long format
df_long <- cleaned_dataset |>
  gather(key = "Year", value = "Accidents", -Category) |>
  mutate(Year = as.numeric(gsub("[^0-9]", "", Year)))

# Filter the data for vehicle and non-vehicle causes
df_vehicles <- df_long |> 
  filter(Category %in% causes_vehicles$Category)

df_non_vehicles <- df_long |> 
  filter(Category %in% causes_non_vehicles$Category)

print(df_vehicles)
print(df_non_vehicles)
```

# Sum Sub-Categories Data

```{r}
#| label: sum-sub-categories-data
#| message: false

# Sum the data from 2012 to 2022
summed_vehicles <- df_vehicles |>
  group_by(Category) |>
  summarise(Sum = sum(Accidents, na.rm = TRUE))

summed_non_vehicles <- df_non_vehicles |>
  group_by(Category) |>
  summarise(Sum = sum(Accidents, na.rm = TRUE))

print(summed_vehicles)
print(summed_non_vehicles)
```

# Create Sparklines for Sub-Categories

```{r}
#| label: create-sparklines-for-sub-categories
#| message: false

# Normalize the accident data for each category
normalize_sparkline <- function(accidents) {
  min_val <- min(accidents, na.rm = TRUE)
  max_val <- max(accidents, na.rm = TRUE)
  (accidents - min_val) / (max_val - min_val)
}

# Function to create sparklines data
create_sparkline_data <- function(df) {
  df |>
    group_by(Category) |>
    summarise(
      Sparkline = list(normalize_sparkline(Accidents)),
      Min = min(Accidents, na.rm = TRUE),
      Max = max(Accidents, na.rm = TRUE),
      Start = first(Accidents),
      End = last(Accidents),
      OriginalValues = list(Accidents)
    )
}

# Create sparklines data for vehicles and non-vehicles
sparklines_vehicles <- create_sparkline_data(df_vehicles)
sparklines_non_vehicles <- create_sparkline_data(df_non_vehicles)

# Print the exact sparkline values for verification
unnested_sparklines_vehicles <- sparklines_vehicles |>
  unnest(cols = c(Sparkline, OriginalValues))
print(unnested_sparklines_vehicles)

unnested_sparklines_non_vehicles <- sparklines_non_vehicles |>
  unnest(cols = c(Sparkline, OriginalValues))
print(unnested_sparklines_non_vehicles)
```

# Create Table

```{r}
#| label: create-table
#| message: false

# Function to create GT table with sparklines and labels
create_gt_table <- function(data_table, category_label, spkl_palette, line_color) {
  data_table |>
    gt() |>
    cols_label(
      Category = category_label,
      Min = "Min Accidents",
      Max = "Max Accidents",
      Sparkline = "2012 to 2022",
      Sum = "Accidents"
    ) |>
    cols_move(c("Min", "Max"), after = "Category") |>
    cols_move("Sum", after = "Sparkline") |>
    gtExtras::gt_plt_sparkline(
      Sparkline,
      type = "shaded",
      label = FALSE,
      palette = spkl_palette
    ) |>
    text_transform(
      locations = cells_body(columns = Sparkline),
      fn = function(x) {
        lapply(seq_along(x), function(i) {
          paste0(
            "<div style='display: flex; justify-content: space-between; color: ", line_color, ";'>",
            "<span>", data_table$Start[i], "</span>",
            x[i],
            "<span>", data_table$End[i], "</span>",
            "</div>"
          )
        })
      }
    ) |>
    tab_style(
      style = cell_text(size = px(10)),
      locations = cells_body(columns = Sparkline)
    ) |>
    tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_column_labels(everything())
    ) |>
    tab_options(
      table.width = pct(100)
    ) |>
    cols_hide(columns = c(Start, End, OriginalValues))
}

# Combine summed data and sparklines for vehicles
vehicles_table <- left_join(summed_vehicles, sparklines_vehicles, by = "Category")

# Combine summed data and sparklines for non-vehicles
non_vehicles_table <- left_join(summed_non_vehicles, sparklines_non_vehicles, by = "Category")

# Define sparkline palettes and line colors
spkl_palette_vehicle <- c("#2F81C5", "#205988", "orange", "red", "lightblue")
spkl_palette_non_vehicle <- c("#2DA5B2", "#217E88", "orange", "red", "lightblue")

# Create GT tables
gt_table_vehicles <- create_gt_table(vehicles_table, "Vehicle Causes", spkl_palette_vehicle, "#205988")
gt_table_non_vehicles <- create_gt_table(non_vehicles_table, "Non-Vehicle Causes", spkl_palette_non_vehicle, "#217E88")

# Save tables as images
gtsave(gt_table_vehicles, "vehicle_table.png")
gtsave(gt_table_non_vehicles, "non_vehicle_table.png")

# Display images separately
grid::grid.newpage()
grid::grid.raster(as.raster(png::readPNG("vehicle_table.png")))

grid::grid.newpage()
grid::grid.raster(as.raster(png::readPNG("non_vehicle_table.png")))
```

