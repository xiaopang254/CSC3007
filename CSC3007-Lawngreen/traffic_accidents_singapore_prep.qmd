---
title: "Traffic Accidents Singapore Data Preparation"
subtitle: "Team CSC3007 P1 Lawngreen"
author:
  - Samantha Lee Qiao Yu
  - Izz Danial Bin Selamat
  - Mathan S/O Nanthabala
  - Low Li Pin
  - Lau Jun Xiang
  - Neo Kah Siak
date: 2024-07-03
format:
  html:
    theme: cosmo
number-sections: true
knitr:
  opts_chunk:
    message: false
---


# Preparation of Data for Traffic Accidents Singapore

## Required packages

```{r}
#| label: required-packages
#| message: false

# Function to install and load a package
install_and_load <- function(package) {
  if (!requireNamespace(package, quietly = TRUE)) {
    install.packages(package)
  }
  library(package, character.only = TRUE)
}

# List of required packages
required_packages <- c("readr", "dplyr", "tidyverse", "gridExtra", "grid", "gt", "gtExtras", "sparkline", "patchwork", "png")

# Install and load required packages
for (pkg in required_packages) {
  install_and_load(pkg)
}
```


## Original Data Import

```{r}
#| label: original-data-import
#| message: false

# Import the dataset
original_dataset <- read.csv("../data/original_dataset.csv", skip = 10)
colnames(original_dataset)
```


## Clean Data

```{r}
#| label: clean-data
#| message: false
#| warning: false

# Convert column headers to character type
colnames(original_dataset) <- as.character(colnames(original_dataset))

# Remove the 'X' from column headers
colnames(original_dataset) <- gsub("X", "", colnames(original_dataset))

# Change the column header name for the first column
colnames(original_dataset)[1] <- "Category"

# Convert everything from row 1, column 2 onwards to double
original_dataset <- original_dataset |>
  mutate(across(-1, as.double))

# Select rows up to row 123 (Skipped 9 rows, 121 - 9 = 112) and remove original combined rows
original_dataset <- original_dataset[1:112,]

# Change NA to 0
original_dataset[is.na(original_dataset)] <- 0

# Removing fatal rows
original_dataset <- original_dataset[-c(1:53),]
```


## Row Extraction

```{r}
#| label: row-extraction
#| message: false

# Extract specific rows to combine
extract_rows <- function(dataset, row_indices_list) {
  extracted_rows <- lapply(row_indices_list, function(rows) dataset[rows, ])
  return(extracted_rows)
}

veh_rows_indices <- list(
  veh1 = c(2:23, 26:34),
  veh2 = c(2, 8, 9, 11, 13, 14, 31, 32),
  veh3 = c(3, 15, 16),
  veh4 = c(4, 30),
  veh5 = c(5, 10, 12, 17, 22, 23, 33),
  veh6 = c(6, 7, 18, 26),
  veh7 = c(19, 20, 28),
  veh8 = c(21, 27, 29),
  veh9 = c(34)
)

ped_rows_indices <- list(
  ped1 = c(24, 25, 36:45, 47:55),
  ped2 = c(24, 37, 38, 39, 40, 48, 49, 50, 52),
  ped3 = c(25, 36, 41, 44, 47, 51, 54),
  ped4 = c(42, 43, 53),
  ped5 = c(45, 55)
)

veh_rows <- extract_rows(original_dataset, veh_rows_indices)
ped_rows <- extract_rows(original_dataset, ped_rows_indices)
```


## Create Char Columns

```{r}
#| label: create-char-column
#| message: false

# Define the first column data
veh_first_columns <- c(
  "Injury Accidents Attributed To Vehicles",
  "Improper Lane and Speed Management",
  "Traffic Signal Violations",
  "Driving Under Influence",
  "Failure to Give Way",
  "Improper Vehicle Control (While in Motion)",
  "Reckless and Distracted Driving",
  "Improper Parking and Vehicle Control (While Stationary)",
  "Other Causes Of Accidents Attributed To Vehicles"
)

ped_first_columns <- c(
  "Injury Accidents Attributed To Non-Vehicles (Pedestrians, Cyclists, PMD)",
  "Unsafe Crossing Behaviors",
  "Unsafe Activities in Public Areas",
  "Substance Influence",
  "Other Causes Of Accidents Attributed To Pedestrians"
)
```


## Create Sum Columns

```{r}
#| label: create-sum-columns
#| message: false

# Sum the numeric columns
sum_numeric_columns <- function(rows_list) {
  combined_numerics <- lapply(rows_list, function(rows) colSums(rows[2:ncol(rows)]))
  return(combined_numerics)
}

veh_combined_numerics <- sum_numeric_columns(veh_rows)
ped_combined_numerics <- sum_numeric_columns(ped_rows)
```


## Combine Char and Sum Columns

```{r}
#| label: combine-char-and-sum-columns
#| message: false

# Combine character column with summed numeric columns
combine_columns <- function(first_column, combined_numerics) {
  combined_data <- lapply(seq_along(first_column), function(i) {
    data.frame(first_column[i], t(combined_numerics[[i]]))
  })
  return(do.call(rbind, combined_data))
}

veh_data <- combine_columns(veh_first_columns, veh_combined_numerics)
ped_data <- combine_columns(ped_first_columns, ped_combined_numerics)
```


## Rename Columns

```{r}
#| label: rename-columns
#| message: false

# Rename the columns
rename_columns <- function(data, original_headers) {
  colnames(data)[1] <- original_headers[1]
  return(data)
}

veh_data <- rename_columns(veh_data, colnames(original_dataset))
ped_data <- rename_columns(ped_data, colnames(original_dataset))
```


## Combine All Data

```{r}
#| label: combine-all-data
#| message: false

# Combine data
combine_all_data <- function(veh_data, ped_data, original_headers) {
  final_data <- rbind(veh_data, ped_data)
  colnames(final_data) <- original_headers
  return(final_data)
}

finalData <- combine_all_data(veh_data, ped_data, colnames(original_dataset))

# Print final data
finalData
```


## Output Cleaned Data

```{r}
#| label: output-cleaned-data
#| message: false

# Save the modified data frame to a new CSV file
write.csv(finalData, "../data/cleaned_dataset.csv", row.names = FALSE)
```


# Visualizing of Data for Traffic Accidents Singapore

## Cleaned Data Import

```{r}
#| label: cleaned-data-import
#| message: false

# Import the dataset
cleaned_dataset <- read.csv("../data/cleaned_dataset.csv")
colnames(cleaned_dataset)
```


## Extract Data

```{r}
#| label: extract-data
#| message: false

# Function to extract data
extract_data <- function(dataset, category) {
  dataset |> filter(Category == category)
}

# Use the function to extract data
vehicle_accidents <- extract_data(cleaned_dataset, "Injury Accidents Attributed To Vehicles")
non_vehicle_accidents <- extract_data(cleaned_dataset, "Injury Accidents Attributed To Non-Vehicles (Pedestrians, Cyclists, PMD)")

print(vehicle_accidents)
print(non_vehicle_accidents)
```


## Transform Data

```{r}
#| label: transform-data
#| message: false

# Function to transform data
transform_data <- function(data, years, is_vehicle = TRUE) {
  if (is_vehicle) {
    tibble(
      Year = years,
      Accidents = as.numeric(data[1, 2:12])
    )
  } else {
    tibble(
      Year = years,
      Accidents = as.numeric(data)
    )
  }
}

# Extract the years from the column names
years <- as.numeric(sub("X", "", names(cleaned_dataset)[2:12]))

# Use the function to transform data
vehicle_data <- transform_data(vehicle_accidents, years, TRUE)
non_vehicle_data <- transform_data(non_vehicle_accidents[1, 2:12], years, FALSE)

# Print data to verify
print(vehicle_data)
print(non_vehicle_data)
```


## Create Sparklines

```{r}
#| label: create-sparklines
#| message: false

# Display the sparklines
sparkline(vehicle_data$Accidents, type = "line", width = "100%", height = "100px")
sparkline(non_vehicle_data$Accidents, type = "line", width = "100%", height = "100px")
```


## Plot Overview Graph

```{r}
#| label: plot-overview-graph
#| message: false

# Function to create plot
create_plot <- function(data, title, line_color, point_color) {
  ggplot(data, aes(x = Year, y = Accidents)) +
    geom_line(color = line_color) +
    geom_point(color = point_color) +
    scale_x_continuous(breaks = unique(data$Year)) +
    scale_y_continuous(n.breaks = 8) +
    theme_minimal() +
    labs(
      title = title,
      x = "Year",
      y = "No. of Accidents",
      caption = "Source: Singapore Police Force"
    ) +
    theme(
      plot.caption = element_text(face = "italic", hjust = 1, vjust = 1, size = 12),
      plot.title = element_text(face = "bold", hjust = 0.5, margin = margin(b = 10), size = 18),
      axis.title.x = element_text(margin = margin(t = 10), size = 16),
      axis.title.y = element_text(margin = margin(r = 10), size = 16),
      axis.text.x = element_text(size = 15),
      axis.text.y = element_text(size = 15)
    )
}

# Use the function to create plots
vehicle_plot <- create_plot(vehicle_data, "Vehicles", "#2F81C5", "#205988")
non_vehicle_plot <- create_plot(non_vehicle_data, "Non-Vehicles (Pedestrians, Cyclists, PMD)", "#2DA5B2", "#217E88")

# Create a spacer grob
spacer <- nullGrob()

# Create the main title grob with line break and bold font
main_title <- textGrob(
  bquote(atop(bold("Number of Traffic Accidents Resulting in"), bold("Injured Persons Attributed To"))),
  gp = gpar(fontsize = 24)
)

# Combine the two plots side by side with spacing and add the main title
overview_plot <- arrangeGrob(
  main_title,
  arrangeGrob(vehicle_plot, spacer, non_vehicle_plot, ncol = 3, widths = c(1, 0.1, 1)),
  ncol = 1,
  heights = c(0.30, 1)
)

# Save the combined plot as an image
ggsave("images/overview_plot.png", plot = overview_plot, width = 16, height = 7, dpi = 300)

# Display the saved plot image
grid::grid.newpage()
grid::grid.raster(as.raster(png::readPNG("images/overview_plot.png")))
```


## Identify Sub-Categories

```{r}
#| label: identify-sub-categories
#| message: false

# Identify the rows for the main categories
vehicles_keyword <- "Injury Accidents Attributed To Vehicles"
non_vehicles_keyword <- "Injury Accidents Attributed To Non-Vehicles (Pedestrians, Cyclists, PMD)"

# Find the starting indices of each category
start_vehicle <- which(cleaned_dataset$Category == vehicles_keyword)
start_non_vehicle <- which(cleaned_dataset$Category == non_vehicles_keyword)

# Determine the ending indices of each category
end_vehicle <- ifelse(length(start_non_vehicle) > 0, start_non_vehicle - 1, nrow(df))
end_non_vehicle <- nrow(cleaned_dataset)

# Extract causes for vehicles from the dataset
causes_vehicles <- cleaned_dataset[(start_vehicle + 1):end_vehicle, ] |>
  filter(!grepl(non_vehicles_keyword, Category)) |>
  select(Category)

# Extract causes for non-vehicles from the dataset
causes_non_vehicles <- cleaned_dataset[(start_non_vehicle + 1):end_non_vehicle, ] |>
  filter(!grepl(vehicles_keyword, Category)) |>
  select(Category)

print(causes_vehicles)
print(causes_non_vehicles)
```


## Read in Long Format

```{r}
#| label: read-in-long-format
#| message: false

# Select relevant columns and gather into long format
df_long <- cleaned_dataset |>
  gather(key = "Year", value = "Accidents", -Category) |>
  mutate(Year = as.numeric(gsub("[^0-9]", "", Year)))

# Filter the data for vehicle and non-vehicle causes
df_vehicles <- df_long |>
  filter(Category %in% causes_vehicles$Category)

df_non_vehicles <- df_long |>
  filter(Category %in% causes_non_vehicles$Category)
```


## Sum Sub-Categories Data

```{r}
#| label: sum-sub-categories-data
#| message: false

# Sum the data from 2012 to 2022
summed_vehicles <- df_vehicles |>
  group_by(Category) |>
  summarise(Sum = sum(Accidents, na.rm = TRUE))

summed_non_vehicles <- df_non_vehicles |>
  group_by(Category) |>
  summarise(Sum = sum(Accidents, na.rm = TRUE))

print(summed_vehicles)
print(summed_non_vehicles)
```


## Create Sparklines for Sub-Categories

```{r}
#| label: create-sparklines-for-sub-categories
#| message: false

# Normalize the accident data for each category
normalize_sparkline <- function(accidents) {
  min_val <- min(accidents, na.rm = TRUE)
  max_val <- max(accidents, na.rm = TRUE)
  (accidents - min_val) / (max_val - min_val)
}

# Function to create sparklines data
create_sparkline_data <- function(df) {
  df |>
    group_by(Category) |>
    summarise(
      Sparkline = list(normalize_sparkline(Accidents)),
      Min = min(Accidents, na.rm = TRUE),
      Max = max(Accidents, na.rm = TRUE),
      Start = first(Accidents),
      End = last(Accidents),
      OriginalValues = list(Accidents)
    )
}

# Create sparklines data for vehicles and non-vehicles
sparklines_vehicles <- create_sparkline_data(df_vehicles)
sparklines_non_vehicles <- create_sparkline_data(df_non_vehicles)

# Print the exact sparkline values for verification
unnested_sparklines_vehicles <- sparklines_vehicles |>
  unnest(cols = c(Sparkline, OriginalValues))

unnested_sparklines_non_vehicles <- sparklines_non_vehicles |>
  unnest(cols = c(Sparkline, OriginalValues))
```


## Create Table

```{r}
#| label: create-table
#| message: false

# Function to create GT table with sparklines and labels
create_gt_table <- function(data_table, category_label, spkl_palette, line_color) {
  data_table |>
    gt() |>
    cols_label(
      Category = category_label,
      Min = "Min Accidents",
      Max = "Max Accidents",
      Sparkline = "2012 to 2022",
      Sum = "Accidents"
    ) |>
    cols_move(c("Min", "Max"), after = "Category") |>
    cols_move("Sum", after = "Sparkline") |>
    gtExtras::gt_plt_sparkline(
      Sparkline,
      type = "shaded",
      label = FALSE,
      palette = spkl_palette
    ) |>
    text_transform(
      locations = cells_body(columns = Sparkline),
      fn = function(x) {
        lapply(seq_along(x), function(i) {
          paste0(
            "<div style='display: flex; justify-content: space-between; color: ", line_color, ";'>",
            "<span>", data_table$Start[i], "</span>",
            x[i],
            "<span>", data_table$End[i], "</span>",
            "</div>"
          )
        })
      }
    ) |>
    tab_style(
      style = cell_text(size = px(10)),
      locations = cells_body(columns = Sparkline)
    ) |>
    tab_style(
      style = cell_text(weight = "bold"),
      locations = cells_column_labels(everything())
    ) |>
    tab_options(
      table.width = pct(100)
    ) |>
    cols_hide(columns = c(Start, End, OriginalValues))
}

# Combine summed data and sparklines for vehicles
vehicles_table <- left_join(summed_vehicles, sparklines_vehicles, by = "Category")

# Combine summed data and sparklines for non-vehicles
non_vehicles_table <- left_join(summed_non_vehicles, sparklines_non_vehicles, by = "Category")

# Define sparkline palettes and line colors
spkl_palette_vehicle <- c("#2F81C5", "#205988", "orange", "red", "lightblue")
spkl_palette_non_vehicle <- c("#2DA5B2", "#217E88", "orange", "red", "lightblue")

# Create GT tables
gt_table_vehicles <- create_gt_table(vehicles_table, "Vehicle Causes", spkl_palette_vehicle, "#205988")
gt_table_non_vehicles <- create_gt_table(non_vehicles_table, "Non-Vehicle Causes", spkl_palette_non_vehicle, "#217E88")

# Save tables as images
gtsave(gt_table_vehicles, "images/vehicle_table.png")
gtsave(gt_table_non_vehicles, "images/non_vehicle_table.png")

# Display images separately
grid::grid.newpage()
grid::grid.raster(as.raster(png::readPNG("images/vehicle_table.png")))

grid::grid.newpage()
grid::grid.raster(as.raster(png::readPNG("images/non_vehicle_table.png")))
```

